package pages

import (
	"github.com/FACorreiaa/go-website/ui/layouts"
	"github.com/FACorreiaa/go-website/ui/components/card"
	"github.com/FACorreiaa/go-website/ui/components/button"
)

type Project struct {
	Title       string
	Description string
	Technologies []string
	GithubURL   string
	LiveURL     string
	Status      string // "completed", "in-progress", "planned"
	ImageURL    string
}

templ Projects() {
	@layouts.BaseLayout() {
		<div class="min-h-screen bg-background">
			<div class="container mx-auto px-4 py-8 max-w-6xl">
				<!-- Header -->
				<div class="text-center mb-12">
					<h1 class="text-4xl font-bold mb-4">My Projects</h1>
					<p class="text-xl text-muted-foreground">A showcase of my work and ongoing experiments</p>
				</div>

				<!-- Featured Projects -->
				<div class="mb-12">
					<h2 class="text-2xl font-semibold mb-6">Featured Projects</h2>
					<div class="grid lg:grid-cols-2 gap-8">
						@ProjectCard(Project{
							Title: "Loci Server",
							Description: "Gemini powered trip assistant. Agentic API built with go and Gemini SDk to help users build their own itinerary",
							Technologies: []string{"Go", "Postgres", "PostGIS", "Docker", "Kubernetes", "Terraform"},
							GithubURL: "https://github.com/FACorreiaa/wanderwise-ai-server",
							LiveURL: "",
							Status: "in-progress",
						})
						@ProjectCard(Project{
							Title: "Loci client",
							Description: "Mobile first web app for Loci. Travel assistant tracker focused on building itineraries and help users save time between points of interest",
							Technologies: []string{"SolidStart", "Solid-query", "shadcn", "tailwindcss"},
							GithubURL: "https://github.com/FACorreiaa/wanderwise-ai-client",
							LiveURL: "",
							Status: "in-progress",
						})

						@ProjectCard(Project{
							Title: "Go FitMe REST",
							Description: "Backend of the Stay Healthy App. Comprehensive fitness tracking API with user management, workout planning, and health metrics.",
							Technologies: []string{"Go", "REST API", "gRPC", "PostgreSQL"},
							GithubURL: "https://github.com/FACorreiaa/Go-FitMe-REST",
							LiveURL: "",
							Status: "completed",
						})
					</div>
				</div>

				<!-- All Projects -->
				<div class="mb-12">
					<h2 class="text-2xl font-semibold mb-6">All Projects</h2>
					<div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
						@ProjectCard(Project{
							Title: "FitMe gRPC",
							Description: "gRPC server for the FitME REST API. High-performance microservice communication with protocol buffers.",
							Technologies: []string{"Go", "gRPC", "Protocol Buffers"},
							GithubURL: "https://github.com/FACorreiaa/fitme-grpc",
							LiveURL: "",
							Status: "completed",
						})

						@ProjectCard(Project{
							Title: "FitMe Protos",
							Description: "Protocol buffer repository for FitME backend. Defines the service contracts and data structures for the fitness application.",
							Technologies: []string{"Go", "Protocol Buffers", "gRPC"},
							GithubURL: "https://github.com/FACorreiaa/fitme-protos",
							LiveURL: "",
							Status: "completed",
						})

						@ProjectCard(Project{
							Title: "Ink App Backend gRPC",
							Description: "gRPC client for ink backend. Microservice architecture for creative content management system.",
							Technologies: []string{"Go", "gRPC", "Microservices"},
							GithubURL: "https://github.com/FACorreiaa/ink-app-backend-grpc",
							LiveURL: "",
							Status: "in-progress",
						})

						@ProjectCard(Project{
							Title: "SkyVisor Insight",
							Description: "Aviation tracker server side rendering page using Go, Templ, HTMX and Postgres. Real-time flight tracking with modern web technologies.",
							Technologies: []string{"Go", "Templ", "HTMX", "PostgreSQL"},
							GithubURL: "https://github.com/FACorreiaa/skyvisor-insight",
							LiveURL: "",
							Status: "completed",
						})

						@ProjectCard(Project{
							Title: "Algorithms Review",
							Description: "Main Algorithms and Logic in Python. Comprehensive collection of algorithm implementations for learning and reference.",
							Technologies: []string{"Python", "Algorithms", "Data Structures"},
							GithubURL: "https://github.com/FACorreiaa/algorithms-review",
							LiveURL: "",
							Status: "completed",
						})
					</div>
				</div>

				<!-- Tech Stack Focus -->
				<div class="mb-12">
					@card.Card() {
						<div class="p-8">
							<h2 class="text-2xl font-semibold mb-6">Technology Focus</h2>
							<p class="text-muted-foreground mb-6">
								My projects primarily focus on backend development with Go, emphasizing:
							</p>
							
							<div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
								<div class="space-y-4">
									<div class="border-l-4 border-primary pl-4">
										<h3 class="font-semibold">Microservices</h3>
										<p class="text-sm text-muted-foreground">gRPC-based service architectures with protocol buffers</p>
									</div>
									<div class="border-l-4 border-primary pl-4">
										<h3 class="font-semibold">Real-time Applications</h3>
										<p class="text-sm text-muted-foreground">HTMX and WebSocket implementations for live data</p>
									</div>
								</div>
								<div class="space-y-4">
									<div class="border-l-4 border-primary pl-4">
										<h3 class="font-semibold">Modern Web Stack</h3>
										<p class="text-sm text-muted-foreground">Go with Templ for server-side rendering</p>
									</div>
									<div class="border-l-4 border-primary pl-4">
										<h3 class="font-semibold">API Design</h3>
										<p class="text-sm text-muted-foreground">RESTful and gRPC APIs with PostgreSQL</p>
									</div>
								</div>
								<div class="space-y-4">
									<div class="border-l-4 border-primary pl-4">
										<h3 class="font-semibold">Algorithm Study</h3>
										<p class="text-sm text-muted-foreground">Continuous learning and implementation in Python</p>
									</div>
									<div class="border-l-4 border-primary pl-4">
										<h3 class="font-semibold">Aviation Tech</h3>
										<p class="text-sm text-muted-foreground">Specialized tracking and monitoring systems</p>
									</div>
								</div>
							</div>
						</div>
					}
				</div>

				<!-- Contact CTA -->
				<div class="text-center">
					@card.Card() {
						<div class="p-8">
							<h2 class="text-2xl font-semibold mb-4">Interested in Collaborating?</h2>
							<p class="text-muted-foreground mb-6">
								I'm always open to discussing new projects, opportunities, or just chatting about technology.
							</p>
							<div class="flex justify-center gap-4">
								@button.Button(button.Props{
									Variant: "default",
									Href:    "mailto:fernandocorreia316@gmail.com",
								}) {
									Get In Touch
								}
								@button.Button(button.Props{
									Variant: "outline",
									Href:    "https://github.com/FACorreiaa",
									Target:  "_blank",
								}) {
									View GitHub
								}
							</div>
						</div>
					}
				</div>
			</div>
		</div>
	}
}

templ ProjectCard(project Project) {
	@card.Card() {
		<div class="p-4 md:p-6 h-full flex flex-col">
			<!-- Status Badge -->
			<div class="flex flex-col sm:flex-row sm:justify-between sm:items-start mb-3 md:mb-4">
				<h3 class="text-base md:text-lg font-semibold mb-2 sm:mb-0">{project.Title}</h3>
				<span class={
					"px-2 py-1 text-xs rounded-full",
					templ.KV("bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300", project.Status == "completed"),
					templ.KV("bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300", project.Status == "in-progress"),
					templ.KV("bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300", project.Status == "planned"),
				}>
					if project.Status == "completed" {
						âœ“ Completed
					} else if project.Status == "in-progress" {
						ðŸš§ In Progress
					} else {
						ðŸ“… Planned
					}
				</span>
			</div>

			<!-- Description -->
			<p class="text-xs md:text-sm text-muted-foreground mb-3 md:mb-4 flex-grow">{project.Description}</p>

			<!-- Technologies -->
			<div class="mb-3 md:mb-4">
				<div class="flex flex-wrap gap-1 md:gap-2">
					for _, tech := range project.Technologies {
						<span class="px-2 py-1 bg-secondary/50 text-secondary-foreground rounded text-xs">
							{tech}
						</span>
					}
				</div>
			</div>

			<!-- Links -->
			<div class="flex flex-col sm:flex-row gap-2 mt-auto">
				if project.GithubURL != "" {
					@button.Button(button.Props{
						Variant: "outline",
						Size:    "sm",
						Href:    project.GithubURL,
						Target:  "_blank",
					}) {
						GitHub
					}
				}
				if project.LiveURL != "" {
					@button.Button(button.Props{
						Variant: "default",
						Size:    "sm",
						Href:    project.LiveURL,
						Target:  "_blank",
					}) {
						Live Demo
					}
				}
			</div>
		</div>
	}
}